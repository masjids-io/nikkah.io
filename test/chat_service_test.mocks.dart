// Mocks generated by Mockito 5.4.6 from annotations
// in nikkah_io/test/chat_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nikkah_io/models/message.dart' as _i2;
import 'package:nikkah_io/services/chat_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMessage_0 extends _i1.SmartFake implements _i2.Message {
  _FakeMessage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatService extends _i1.Mock implements _i3.ChatService {
  MockChatService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  set onMessageReceived(dynamic Function(_i2.Message)? _onMessageReceived) =>
      super.noSuchMethod(
        Invocation.setter(
          #onMessageReceived,
          _onMessageReceived,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onConnectionStatusChanged(
          dynamic Function(String)? _onConnectionStatusChanged) =>
      super.noSuchMethod(
        Invocation.setter(
          #onConnectionStatusChanged,
          _onConnectionStatusChanged,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(dynamic Function(String)? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> connect(String? userID) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [userID],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> joinConversation(String? conversationID) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinConversation,
          [conversationID],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Message> sendMessage(
    String? senderID,
    String? conversationID,
    String? content,
    String? messageType,
    String? mediaURL,
    List<int>? metadata,
    String? replyToMessageID,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            senderID,
            conversationID,
            content,
            messageType,
            mediaURL,
            metadata,
            replyToMessageID,
          ],
        ),
        returnValue: _i4.Future<_i2.Message>.value(_FakeMessage_0(
          this,
          Invocation.method(
            #sendMessage,
            [
              senderID,
              conversationID,
              content,
              messageType,
              mediaURL,
              metadata,
              replyToMessageID,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Message>);

  @override
  _i4.Future<List<_i2.Message>> getMessagesByConversation(
    String? conversationID,
    int? limit,
    int? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesByConversation,
          [
            conversationID,
            limit,
            offset,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Message>>.value(<_i2.Message>[]),
      ) as _i4.Future<List<_i2.Message>>);

  @override
  _i4.Future<void> markMessageAsRead(
    String? messageID,
    String? readerID,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [
            messageID,
            readerID,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void sendTypingIndicator(
    String? conversationID,
    bool? isTyping,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendTypingIndicator,
          [
            conversationID,
            isTyping,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
